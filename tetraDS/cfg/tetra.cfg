#! /usr/bin/env python
#
# Copyright (C) 2012, University of Osnabrueck
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the University of Osnabrueck nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#  Created on: 17.07.2012
#
#      Author: Martin Guenther <mguenthe@uos.de>
#
#  Based on hokuyo_node/cfg/Hokuyo.cfg

PACKAGE='tetraDS'
from dynamic_reconfigure.parameter_generator_catkin import *

from math import pi

gen = ParameterGenerator()
#       Name                      Type      Reconfiguration level  Description                              Default     Min         Max
gen.add("f_acc",                  double_t, 0,                     "Forward acceleration.",                 0.01,      0.001,      0.1)
gen.add("f_dec",                  double_t, 0,                     "Forward deceleration.",                 0.01,      0.001,      0.1)
gen.add("b_acc",                  double_t, 0,                     "Reverse acceleration.",                 0.01,      0.001,      0.1)
gen.add("b_acc_add_above_zero",   double_t, 0,                     "Reverse acceleration add above zero.",  0.0,        0.0,        0.1)
gen.add("b_dec",                  double_t, 0,                     "Reverse deceleration.",                 0.01,      0.001,      0.1)
gen.add("angular_acc_dec",        double_t, 0,                     "Angular acceleration and deceleration.",0.02,       0.001,      0.1)
gen.add("wheel_radius",           int_t,    0,                     "Robot wheel radius.",                   1027,       500,        2000)
gen.add("wheel_distance",         int_t,    0,                     "Distance between wheels.",              4420,       1000,       20000)
gen.add("use_total_distance_pub", bool_t,   0,                     "Use total distance topic publisher.",   True)
gen.add("frame_id",               str_t,    0,                     "Odometry frame id.",                    "odom")
gen.add("child_frame_id",         str_t,    0,                     "Odometry child frame id.",              "base_footprint")

exit(gen.generate(PACKAGE, "tetraDS", "TetraDs"))
